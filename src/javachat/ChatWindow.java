package javachat;

import javax.swing.SwingUtilities;

/**
 *
 * @author DrLabman
 */
public class ChatWindow extends javax.swing.JFrame {
	Server server;
	Client client;

	/**
	 * Creates new form ChatWindow
	 */
	public ChatWindow() {
		initComponents();
		
		server = null;
		client = null;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupModeType = new javax.swing.ButtonGroup();
        jRadioButtonServer = new javax.swing.JRadioButton();
        jRadioButtonClient = new javax.swing.JRadioButton();
        jLabelHost = new javax.swing.JLabel();
        jTextFieldHostname = new javax.swing.JTextField();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jToggleButtonOnline = new javax.swing.JToggleButton();
        jTextFieldMessage = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaChat = new javax.swing.JTextArea();
        jButtonSend = new javax.swing.JButton();
        jTextFieldName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonGroupModeType.add(jRadioButtonServer);
        jRadioButtonServer.setText("Server");
        jRadioButtonServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonServerActionPerformed(evt);
            }
        });

        buttonGroupModeType.add(jRadioButtonClient);
        jRadioButtonClient.setSelected(true);
        jRadioButtonClient.setText("Client");
        jRadioButtonClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonClientActionPerformed(evt);
            }
        });

        jLabelHost.setText("Host:");

        jTextFieldHostname.setText("localhost");

        jLabelPort.setText("Port:");

        jTextFieldPort.setText("12345");

        jToggleButtonOnline.setText("Connect");
        jToggleButtonOnline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonOnlineActionPerformed(evt);
            }
        });

        jTextFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldMessageKeyTyped(evt);
            }
        });

        jTextAreaChat.setColumns(20);
        jTextAreaChat.setEditable(false);
        jTextAreaChat.setRows(5);
        jScrollPane1.setViewportView(jTextAreaChat);

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jTextFieldName.setText("Unknown");

        jLabel1.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextFieldMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSend))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jRadioButtonServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonClient)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(jLabelHost)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelPort)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButtonOnline))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldName))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButtonServer)
                    .addComponent(jRadioButtonClient)
                    .addComponent(jToggleButtonOnline)
                    .addComponent(jTextFieldHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHost)
                    .addComponent(jLabelPort)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSend)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jRadioButtonServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonServerActionPerformed
		jTextFieldHostname.setEnabled(false);
	}//GEN-LAST:event_jRadioButtonServerActionPerformed

	private void jRadioButtonClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonClientActionPerformed
		jTextFieldHostname.setEnabled(true);
	}//GEN-LAST:event_jRadioButtonClientActionPerformed

	private void jToggleButtonOnlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonOnlineActionPerformed
		if (jToggleButtonOnline.isSelected()){
			// Connect
			if (jRadioButtonServer.isSelected()){
				// Server
				println("Starting server on port " + jTextFieldPort.getText());
				try {
					int port = Integer.parseInt(jTextFieldPort.getText());
					// Start up the server
					server = new Server(this, port);
					// Make sure the server is up
					while (server.isConnected() != true){
						try {
							Thread.sleep(10);
						} catch (InterruptedException ex) {}
					}
					// Set up a client connecting to our own server for us to send and receive on
					client = new Client(this,"localhost",port);
				} catch (NumberFormatException e){
					println("Port is not a number.");
				}
			} else {
				// Client
				println("Connecting to server " + jTextFieldHostname.getText() + ":" + jTextFieldPort.getText());
				try {
					String hostname = jTextFieldHostname.getText();
					int port = Integer.parseInt(jTextFieldPort.getText());
					client = new Client(this, hostname, port);
				} catch (NumberFormatException e){
					println("Port is not a number.");
				}
			}
			lockServerDetails(true);
		} else {
			// Disconnect
			disconnect();
		}
	}//GEN-LAST:event_jToggleButtonOnlineActionPerformed

	private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
		if (client != null && client.isConnected()){
			String msg = jTextFieldMessage.getText();
			if (!msg.equals("")){
				jTextFieldMessage.setText("");
				String name = jTextFieldName.getText();
				String fullMsg = "[" + name + "] " + msg;
				client.sendMsg(fullMsg);
			}
		} else {
			println("Not connected: Unable to send message.");
		}
	}//GEN-LAST:event_jButtonSendActionPerformed

	private void jTextFieldMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMessageKeyTyped
		if (evt.getKeyChar() == '\n'){
			jButtonSend.doClick();
		}
	}//GEN-LAST:event_jTextFieldMessageKeyTyped

	private void disconnect(){
		boolean disconnected = false;
		
		if (server != null && server.isConnected()){
			server.disconnect();
			disconnected = true;
		}
		
		if (client != null && client.isConnected()){
			client.disconnect();
			disconnected = true;
		}
		
		// Error if we weren't able to disconnect
		if (!disconnected){
			println("Not connected: Unable to disconnect.");
		}
		// Unlock the server details so we can change them before connecting again
		lockServerDetails(false);
	}
	
	private void lockServerDetails(boolean lock){
		jRadioButtonServer.setEnabled(!lock);
		jRadioButtonClient.setEnabled(!lock);
		jTextFieldHostname.setEnabled(!lock);
		jTextFieldPort.setEnabled(!lock);
	}
	
	public void print(final String text){
		SwingUtilities.invokeLater(new Runnable(){
			@Override
			public void run() {
				jTextAreaChat.append(text);
			}
		});
	}
	
	public void println(final String text){
		print(text + "\n");
	}
	
	/** The singleton instance of the chat window */
	public static ChatWindow instance = null;
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ChatWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/**
		 * Disconnect from server/clients when shutting down. Needed by the
		 * server to remove UPnP mapping.
		 */
		Runtime.getRuntime().addShutdownHook(new Thread() {
			@Override
			public void run() {
				if (instance != null){
					if (instance.server != null && instance.server.isConnected()){
						instance.server.disconnect();
					}
					if (instance.client != null && instance.client.isConnected()){
						instance.client.disconnect();
					}
				}
				
			}
		});
		
		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				instance = new ChatWindow();
				instance.setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupModeType;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelHost;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JRadioButton jRadioButtonClient;
    private javax.swing.JRadioButton jRadioButtonServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaChat;
    private javax.swing.JTextField jTextFieldHostname;
    private javax.swing.JTextField jTextFieldMessage;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JToggleButton jToggleButtonOnline;
    // End of variables declaration//GEN-END:variables
}
